// Idea for syntax of an FDSSL program
// Contains various shaders, and only uses some of them in the final program

uniform Mat4 uProjectionMatrix
uniform Mat4 uModelViewMatrix
uniform Int uValue

// an example of a basic function
wave : (Float x) -> Float = {
  mut Float s = sin (x)
  s
}

fact : (Int x) -> Int = {
  if x <= 1 then {
    1
  } else {
    mut Int accum = 1
    for x do {
      // set is 'update'
      set accum (accum * x)
    }
    accum
  }
}

// basic shader
vert v1 : (Vec3 aVertPos) -> () = {
  mut Vec4 pos = vec4 aVertPos[x] aVertPos[y] aVertPos[z] 1.0
  set gl_Position (uProjectionMatrix * uModelViewMatrix * pos)
}

// better shader, w/ an output, varyings
vert v2 : (Vec3 aVertPos) -> (Vec3 vXYZ) = {
  mut Float x = 0.1
  mut Float y = 0.5

  mut Vec4 pos = vec4 aVertPos[x] aVertPos[y] aVertPos[z] 1.0
  set gl_Position (uProjectionMatrix * uModelViewMatrix * pos)

  out vXYZ aVertPos
}

frag f1 : () -> () = {
 set gl_FragColor (vec4 0.5 0.5 0.5 1.0)
}

frag f2 : (Vec3 vXYZ) -> () = {
  mut Float r = wave (vXYZ[0])
  mut Float g = wave (vXYZ[1])
  mut Float b = wave (vXYZ[2])

  mut Vec4 col = vec4 r g b 1.0

  set gl_FragColor col
}

e1 : Prog = mkProg v2 f2
